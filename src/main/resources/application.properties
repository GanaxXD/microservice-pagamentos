#configurações do banco de dados
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/afood_pagamento?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=
spring.jpa.show-sql=true

#registrando essa api, ou, microsservice, no server discovery que eu criei
spring.application.name=pagamentos-ms
eureka.client.serviceUrl.defaultZone=http://localhost:8081/eureka
    #Como o server discovery tem autonomia para decidir em que porta o serviço será "upado", eu seto a porta como 0
server.port=0

#Balance: Balanceamento de carga
#é necessário identificar cada instância do microsserviço. Nessa estratégia,
#usaremos como identificador único o nome da aplicação + um número inteiro aleatório:
eureka.instance.instance-id=${spring.application.name}:${random.int}

#Resilience: implementando o circuit break
    # indica com quantas requisições que faremos uma estatística, para saber se ele pode passar para o estado aberto ou para o fechado.
resilience4j.bulkhead.instances.atualizaPedido.slidingWindowSize: 3
    #indica qual o número mínimo de chamadas que temos que fazer até o circuit breaker entrar em ação.
resilience4j.bulkhead.instances.atualizaPedido.minimumNumberOfCalls: 2
    #é o tempo que vai ser mantido no estado de aberto, configuramos por 50 segundos, visto que o teste vai ser rápido.
resilience4j.bulkhead.instances.atualizaPedido.waitDurationInOpenState: 50s